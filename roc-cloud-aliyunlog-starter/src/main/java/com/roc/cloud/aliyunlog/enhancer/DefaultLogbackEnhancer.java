package com.roc.cloud.aliyunlog.enhancer;import ch.qos.logback.classic.Level;import ch.qos.logback.classic.Logger;import ch.qos.logback.classic.LoggerContext;import ch.qos.logback.classic.spi.ILoggingEvent;import ch.qos.logback.classic.turbo.TurboFilter;import ch.qos.logback.core.Appender;import ch.qos.logback.core.spi.FilterReply;import com.roc.cloud.aliyunlog.utils.LogEnvUtils;import com.roc.cloud.aliyunlog.appender.logback.LogbackAliYunAppender;import com.roc.cloud.aliyunlog.config.LogAppenderConfig;import java.nio.charset.Charset;import java.util.Iterator;import java.util.List;import org.apache.commons.lang.StringUtils;import org.apache.skywalking.apm.toolkit.log.logback.v1.x.TraceIdPatternLogbackLayout;import org.slf4j.ILoggerFactory;import org.slf4j.Marker;import org.slf4j.impl.StaticLoggerBinder;/** * @description: Default log enhancer for logback * @date: 2020/8/13 9:26 * @author: Roc * @version: 1.0 */public class DefaultLogbackEnhancer extends AbstractLogEnhancer {    private final ClassLoader classLoader;    private static LoggerContext ctx;    /**     * DefaultLogbackEnhancer     *     * @param classLoader :     * @return     * @author Roc     * @date 2020/9/30     **/    public DefaultLogbackEnhancer(ClassLoader classLoader) {        this.classLoader = classLoader;        ctx = getLoggerContext();    }    /**     * alreadyBound     *     * @return boolean     * @author Roc     * @date 2020/9/30     **/    @Override    public boolean alreadyBound() {        Class clazz = LogEnvUtils.loadAliyunLogbackAppenderExist(classLoader);        if (clazz == null) {            return false;        } else {            List<Logger> loggerList = ctx.getLoggerList();            for (Logger logger : loggerList) {                Iterator<Appender<ILoggingEvent>> iterator = logger.iteratorForAppenders();                while (iterator.hasNext()) {                    Appender appender = iterator.next();                    if (appender.getClass().isAssignableFrom(clazz)) {                        return true;                    }                }            }            return false;        }    }    /**     * cleanUp     *     * @return void     * @author Roc     * @date 2020/9/30     **/    @Override    public void cleanUp() {        markAsUnEnhanced();    }    /**     * doEnhance     *     * @param config :     * @return void     * @author Roc     * @date 2020/9/30     **/    @Override    protected void doEnhance(LogAppenderConfig config) {        LogbackAliYunAppender aliYunAppender = new LogbackAliYunAppender(config);        aliYunAppender.setContext(ctx);        // config pattern        if (!StringUtils.isBlank(config.getPattern())) {            PatternLayoutEncoder encoder = new PatternLayoutEncoder();            encoder.setPattern(config.getPattern());            encoder.setContext(ctx);            encoder.setPatternLayout(new TraceIdPatternLogbackLayout());            encoder.start();            encoder.setCharset(Charset.forName(config.getCharset()));            aliYunAppender.setEncoder(encoder);        }        aliYunAppender.start();        List<String> loggerFilter = config.getLoggerFilter();        ctx.addTurboFilter(new TurboFilter() {            @Override            public FilterReply decide(Marker marker, Logger logger, Level level, String format, Object[] params, Throwable t) {                if (!logger.isAttached(aliYunAppender) && !loggerFilter.contains(logger.getName())) {                    logger.addAppender(aliYunAppender);                }                return FilterReply.NEUTRAL;            }        });    }    /**     * afterEnhance     *     * @return void     * @author Roc     * @date 2020/9/30     **/    @Override    protected void afterEnhance() {        markAsEnhanced();    }    /**     * hasBeanEnhanced     *     * @return boolean     * @author Roc     * @date 2020/9/30     **/    @Override    protected boolean hasBeanEnhanced() {        return ctx.getObject(DefaultLogbackEnhancer.class.getCanonicalName()) != null;    }    /**     * markAsEnhanced     *     * @return void     * @author Roc     * @date 2020/9/30     **/    private void markAsEnhanced() {        ctx.putObject(DefaultLogbackEnhancer.class.getCanonicalName(), new Object());    }    /**     * markAsUnEnhanced     *     * @return void     * @author Roc     * @date 2020/9/30     **/    private void markAsUnEnhanced() {        ctx.removeObject(DefaultLogbackEnhancer.class.getCanonicalName());    }    /**     * 获取logger上下文     *     * @return ch.qos.logback.classic.LoggerContext     * @author Roc     * @date 2020/9/30     **/    private LoggerContext getLoggerContext() {        ILoggerFactory factory = StaticLoggerBinder.getSingleton().getLoggerFactory();        if (factory instanceof LoggerContext) {            return (LoggerContext) factory;        }        throw new IllegalStateException("ILoggerFactory is not a Logback LoggerContext, but Logback is on the classpath.");    }}