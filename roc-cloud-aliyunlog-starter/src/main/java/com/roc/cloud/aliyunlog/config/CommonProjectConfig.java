package com.roc.cloud.aliyunlog.config;import cn.hutool.core.util.ObjectUtil;import cn.hutool.extra.spring.SpringUtil;import com.aliyun.openservices.aliyun.log.producer.ProjectConfig;import java.io.IOException;import java.util.Properties;import lombok.Data;import lombok.extern.slf4j.Slf4j;import org.springframework.core.env.Environment;import org.springframework.core.io.support.PropertiesLoaderUtils;/** * @description: 公共配置 * @date: 2020/8/13 9:26 * @author: Roc * @version: 1.0 */@Slf4j@Datapublic class CommonProjectConfig {	private static final String CONFIG_FILENAME = "aliyunlog.properties";	private static final String DEFAULT_LOGSTORE = "logstore";	private static final String DEFAULT_PROJECT_NAME = "name";	private static final String DEFAULT_ENDPOINT = "endpoint";	private static final String DEFAULT_ACCESSKEY_ID = "accessKeyId";	private static final String DEFAULT_ACCESSKEY_SECRET = "accessKeySecret";	private static final String DEFAULT_STS_TOKEN = "stsToken";	private static final String DEFAULT_USER_AGENT = "userAgent";	private String name;	private String logstore;	private String endpoint;	private String accessKeyId;	private String accessKeySecret;	private String stsToken;	private String userAgent;//    private final static CommonProjectConfig COMMON_PROJECT_CONFIG = new CommonProjectConfig();	/**	 * CommonProjectConfig 构造函数，初始化配置信息	 *	 * @return	 * @author Roc	 * @date 2020/9/30	 **/	private CommonProjectConfig() {		Properties properties = null;		try {			properties = PropertiesLoaderUtils.loadAllProperties(CONFIG_FILENAME, CommonProjectConfig.class.getClassLoader());			if (ObjectUtil.isNotNull(properties) && properties.size() > 0) {				log.info("阿里云日志,采用{}配置", CONFIG_FILENAME);				this.name = properties.getProperty(DEFAULT_PROJECT_NAME);				this.logstore = properties.getProperty(DEFAULT_LOGSTORE);				this.endpoint = properties.getProperty(DEFAULT_ENDPOINT);				this.accessKeyId = properties.getProperty(DEFAULT_ACCESSKEY_ID);				this.accessKeySecret = properties.getProperty(DEFAULT_ACCESSKEY_SECRET);				this.stsToken = properties.getProperty(DEFAULT_STS_TOKEN);				this.userAgent = properties.getProperty(DEFAULT_USER_AGENT);			} else {				log.info("阿里云日志,采用{}配置", "nacos");				Environment environment = SpringUtil.getBean(Environment.class);				this.name = environment.getProperty("aliyun.log.name");				this.logstore = environment.getProperty("aliyun.log.logstore");				this.endpoint = environment.getProperty("aliyun.log.endpoint");				this.accessKeyId = environment.getProperty("aliyun.log.accessKeyId");				this.accessKeySecret = environment.getProperty("aliyun.log.accessKeySecret");				this.stsToken = environment.getProperty("aliyun.log.stsToken");				this.userAgent = environment.getProperty("aliyun.log.userAgent");			}		} catch (IOException ex) {			ex.printStackTrace();		}	}	/**	 * 获取实例	 *	 * @return	 * @author Roc	 * @date 2020/9/30	 **/	public static CommonProjectConfig instance() {		return SpringUtil.getBean(CommonProjectConfig.class);	}	/**	 * 组装项目配置对象	 *	 * @return com.aliyun.openservices.aliyun.log.producer.ProjectConfig	 * @author Roc	 * @date 2020/9/30	 **/	public ProjectConfig buildProjectConfig() {		return new ProjectConfig(name, endpoint, accessKeyId, accessKeySecret, stsToken, userAgent);	}}